generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Student {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  fatherName   String
  motherName   String
  mobile       String
  gender       Gender?
  bloodGroup   BloodGroup?
  address      Address?
  birthDate    DateTime?
  images       Image?
  classRecords ClassRecord[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  status       Status        @default(Active)
}

model ClassRecord {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  student    Student   @relation(fields: [studentId], references: [id])
  studentId  String    @db.ObjectId
  className  ClassName
  rollNumber Int
  year       Int
  results    Result[]

  @@unique([studentId, className, year]) // Prevent duplicate record per year/class
  @@index([studentId])
}

model Result {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  classRecord   ClassRecord @relation(fields: [classRecordId], references: [id])
  classRecordId String      @db.ObjectId
  type          ResultType
  subjects      Json
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@index([classRecordId])
}

enum ResultType {
  Mid_Term
  Final
}

enum ClassName {
  Class_6
  Class_7
  Class_8
  Class_9
  Class_10
}

enum BloodGroup {
  A_Positive
  A_Negative
  B_Positive
  B_Negative
  AB_Positive
  AB_Negative
  O_Positive
  O_Negative
  Unknown
}

enum Gender {
  Male
  Female
  Other
}

enum Status {
  Active
  Inactive
  Graduated
  Transferred
  Dropped_out
}

type Image {
  url      String
  publicId String
  alt      String?
}

type Address {
  houseOrRoad   String?
  villageOrArea String?
  postOffice    String?
  upazila       String?
  district      String?
  division      String?
  postalCode    String?
}
